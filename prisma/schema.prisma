generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                @id @default(autoincrement())
  clerkUserId        String             @unique
  name               String
  email              String             @unique
  password           String?
  phone              String             @unique
  userImageUrl       String?
  address            String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  pets               Pet[] // User can own multiple pets
  adoptionRequests   AdoptionRequest[] // User's adoption requests
  favoritePets       FavoritePet[] // User's favorite pets
  favoriteCategories FavoriteCategory[] // User's favorite categories
}

model Pet {
  id                Int               @id @default(autoincrement())
  category          String
  breed             String?
  color             String?
  age               Int
  price             Int
  isNegotiable      Boolean
  petImageUrl       String?
  description       String
  vaccinationStatus PetStatus
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  ownerId           Int
  owner             User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  adoptionRequests  AdoptionRequest[]
  favoritedBy       FavoritePet[]
}

model AdoptionRequest {
  id        Int            @id @default(autoincrement())
  petId     Int
  adopterId Int
  adoptedAt DateTime       @default(now())
  status    AdoptionStatus
  pet       Pet            @relation(fields: [petId], references: [id], onDelete: Cascade)
  adopter   User           @relation(fields: [adopterId], references: [id], onDelete: Cascade)
}

// New model for favorite pets
model FavoritePet {
  id        Int      @id @default(autoincrement())
  userId    Int
  petId     Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pet       Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@unique([userId, petId]) // Prevent duplicate favorites
  @@index([userId])
  @@index([petId])
}

// New model for favorite categories
model FavoriteCategory {
  id        Int      @id @default(autoincrement())
  userId    Int
  category  String // e.g., "dog", "cat", etc.
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, category]) // Prevent duplicate category favorites
  @@index([userId])
}

enum PetStatus {
  UPTODATE
  PARTIALVACCINATED
  NOTVACCINATED
}

enum AdoptionStatus {
  PENDING
  COMPLETED
  REJECTED
}
